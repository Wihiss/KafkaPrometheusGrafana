// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/PriceMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace My.Rtm {

  /// <summary>Holder for reflection information generated from Protos/PriceMessage.proto</summary>
  public static partial class PriceMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/PriceMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PriceMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlQcm90b3MvUHJpY2VNZXNzYWdlLnByb3RvEgZteS5ydG0iYQoGQmJvTXNn",
            "EhEKCVNlcU51bWJlchgBIAEoBRIOCgZTeW1ib2wYAiABKAkSGgoEU2lkZRgD",
            "IAEoDjIMLm15LnJ0bS5TaWRlEgsKA1ByYxgEIAEoARILCgNRdHkYBSABKAEq",
            "GAoEU2lkZRIHCgNBc2sQABIHCgNCaWQQAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::My.Rtm.Side), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::My.Rtm.BboMsg), global::My.Rtm.BboMsg.Parser, new[]{ "SeqNumber", "Symbol", "Side", "Prc", "Qty" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Side {
    [pbr::OriginalName("Ask")] Ask = 0,
    [pbr::OriginalName("Bid")] Bid = 1,
  }

  #endregion

  #region Messages
  public sealed partial class BboMsg : pb::IMessage<BboMsg> {
    private static readonly pb::MessageParser<BboMsg> _parser = new pb::MessageParser<BboMsg>(() => new BboMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BboMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::My.Rtm.PriceMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BboMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BboMsg(BboMsg other) : this() {
      seqNumber_ = other.seqNumber_;
      symbol_ = other.symbol_;
      side_ = other.side_;
      prc_ = other.prc_;
      qty_ = other.qty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BboMsg Clone() {
      return new BboMsg(this);
    }

    /// <summary>Field number for the "SeqNumber" field.</summary>
    public const int SeqNumberFieldNumber = 1;
    private int seqNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeqNumber {
      get { return seqNumber_; }
      set {
        seqNumber_ = value;
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Side" field.</summary>
    public const int SideFieldNumber = 3;
    private global::My.Rtm.Side side_ = global::My.Rtm.Side.Ask;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::My.Rtm.Side Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "Prc" field.</summary>
    public const int PrcFieldNumber = 4;
    private double prc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Prc {
      get { return prc_; }
      set {
        prc_ = value;
      }
    }

    /// <summary>Field number for the "Qty" field.</summary>
    public const int QtyFieldNumber = 5;
    private double qty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Qty {
      get { return qty_; }
      set {
        qty_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BboMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BboMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeqNumber != other.SeqNumber) return false;
      if (Symbol != other.Symbol) return false;
      if (Side != other.Side) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Prc, other.Prc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Qty, other.Qty)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeqNumber != 0) hash ^= SeqNumber.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Side != global::My.Rtm.Side.Ask) hash ^= Side.GetHashCode();
      if (Prc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Prc);
      if (Qty != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Qty);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeqNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SeqNumber);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Side != global::My.Rtm.Side.Ask) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Side);
      }
      if (Prc != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Prc);
      }
      if (Qty != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Qty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeqNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeqNumber);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Side != global::My.Rtm.Side.Ask) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (Prc != 0D) {
        size += 1 + 8;
      }
      if (Qty != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BboMsg other) {
      if (other == null) {
        return;
      }
      if (other.SeqNumber != 0) {
        SeqNumber = other.SeqNumber;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Side != global::My.Rtm.Side.Ask) {
        Side = other.Side;
      }
      if (other.Prc != 0D) {
        Prc = other.Prc;
      }
      if (other.Qty != 0D) {
        Qty = other.Qty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SeqNumber = input.ReadInt32();
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            Side = (global::My.Rtm.Side) input.ReadEnum();
            break;
          }
          case 33: {
            Prc = input.ReadDouble();
            break;
          }
          case 41: {
            Qty = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
